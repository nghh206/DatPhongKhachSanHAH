@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail
@using Respository.Interfaces
@using Data.DataTransferObjects.Building
@using Data.DataTransferObjects.Building.Request

<MudDialog>
    <DialogContent>
        @if(building == null)
        {
            <MudText>Không có tòa nhà được chọn</MudText>
        }
        else
        {
            <MudForm Model="buildingUpdate" @ref="_form" @bind-bind-IsValid="_formIsValid">
                <MudPaper Width="100%" Elevation="0">
                    <MudTextField @bind-Value="buildingUpdate.Name" For="@(() => buildingUpdate.Name)" Label="Tên tòa"></MudTextField>
                    <MudSelect T="EntityStatus" AnchorOrigin="Origin.BottomCenter" @bind-Value="buildingUpdate.Status" For="@(() => buildingUpdate.Status)">
                        <MudSelectItem Value="EntityStatus.Active">Hoạt động</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.InActive">Không hoạt động</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.Pending">Chờ</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.PendingForActivation">Chờ hoạt động</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.PendingForConfirmation">Chờ kích hoạt</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.PendingForApproval">Chờ chấp thuận</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.Locked">Khóa</MudSelectItem>
                    </MudSelect>
                </MudPaper>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        @if (building == null)
        {
            <MudButton @onclick="OnClickCancel">Hủy</MudButton>
        }
        else
        {
            <MudButton OnClick="OnClickCancel">Hủy</MudButton>
            <MudButton OnClick="@(async() => await Reset())">Khôi phục</MudButton>
            <MudButton OnClick="@(async() => await UpdateBuilding())">Lưu</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    #region Khai báo
    [Parameter]
    public Guid idBuilding { get; set; }
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    public IBuildingRespo buildingRespo { get; set; }
    [Inject]
    public IDialogService dialogService { get; set; }
    [Inject]
    public ISnackbar snackbar { get; set; }
    [Inject]
    public IRoomDetailRespo roomDetailRespo { get; set; }
    MudForm _form;
    private bool _formIsValid;
    private BuildingUpdateRequest buildingUpdate = new();
    private BuildingDTO? building;
    private PaginationResponse<RoomDetailDTO> roomDetailVM;
    private List<RoomDetailDTO> lstRoomDetail;
    #endregion
    #region Code xử lý
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        building = await buildingRespo.GetBuildingById(idBuilding);
        buildingUpdate.Id = building.Id;
        buildingUpdate.Name = building.Name;
        buildingUpdate.Status = building.Status;
    }
    private void OnClickCancel()
    {
        MudDialog.Cancel();
    }
    private bool CheckChangeData()
    {
        return building!.Name != buildingUpdate.Name || building.Status != buildingUpdate.Status;
    }
    private async Task UpdateBuilding()
    {
        await _form.Validate();
        if(!_form.IsValid) return;
        var confirm = await dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận sửa tòa nhà",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if(confirm == true)
        {
            roomDetailVM = await roomDetailRespo.GetAllRoomDetails(new Data.DataTransferObjects.RoomDetail.Request.ViewRoomDetailWithPaginationRequest
                {
                    PageSize = int.MaxValue - 1,
                    BuildingId = idBuilding
                });
            lstRoomDetail = roomDetailVM.Data!.ToList();
            if (lstRoomDetail.Any(x => x.Status == RoomStatus.Occupied || x.Status == RoomStatus.Reserved || x.Status == RoomStatus.AwaitingConfirmation || x.Status == RoomStatus.DoNotDisturb))
            {
                MudDialog.Close(DialogResult.Ok(true));
                snackbar.Add("Có phòng đang được đặt tại tòa này, không sửa được", Severity.Error);
            }
            else
            {
                var result = await buildingRespo.UpdateBuilding(buildingUpdate);
                if (result)
                {
                    if (CheckChangeData())
                    {
                        MudDialog.Close(DialogResult.Ok(true));
                        snackbar.Add("Sửa thành công", Severity.Success);
                    }
                    else
                    {
                        OnClickCancel();
                        snackbar.Add("Không có thay đổi dữ liệu để cập nhật", Severity.Warning);
                    }
                }
                else
                {
                    snackbar.Add("Sửa thất bại", Severity.Error);
                }
            }
           
        }
    }
    private async Task Reset()
    {
        await LoadData();
    }
    #endregion
}
