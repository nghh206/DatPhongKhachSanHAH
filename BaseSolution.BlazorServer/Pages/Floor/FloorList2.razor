@page "/floorlistp2"
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Building;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Floor;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Floor.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail
@using BaseSolution.BlazorServer.Respository.Interfaces;
<PageTitle>Danh sách tầng</PageTitle>
@attribute [Authorize(Roles = "Admin")]
<CustomListDisplayP2 Label="Danh sách tầng trong khách sạn" IsLoading="lstBuilding == null" DisableSearch="_isDisableControls" OnSearch="@OnSearch">
    <HeaderContent>
         <AuthorizeView Roles="Admin"> 
        <MudChip Icon="@Icons.Material.Filled.Add" OnClick="@(async() => await OpenAdd())" Color="Color.Primary">Thêm</MudChip>
        </AuthorizeView>
    </HeaderContent>
    <AdditionalSearchBarColumn>
        <MudSelect Variant="Variant.Outlined" Style="background-color: white;" AnchorOrigin="Origin.BottomCenter" Label="Tòa nhà" @bind-Value="_idBuilding">
            @foreach (var item in lstBuilding)
            {
                <MudSelectItem Value="@item.Id.ToString()">@item.Name</MudSelectItem>
            }
        </MudSelect>
    </AdditionalSearchBarColumn>
    <BodyContent>
        <MudPaper Elevation="0">
            @if (_isLoadingList)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="m-3" />
            }
            else
            {
                <MudTable Items="@floorPagination.Data" Style="position: relative;" Elevation="0">
                    <HeaderContent>
                        <MudTh>STT</MudTh>
                        <MudTh>Tầng</MudTh>
                        <MudTh>Số phòng</MudTh>
                        <MudTh>Tòa</MudTh>
                        <MudTh>Trạng thái</MudTh>
                        <MudTh>Thao tác</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@(lstFloor.IndexOf(context) + 1)</MudTd>
                            <MudTd>@context.Name</MudTd>
                            <MudTd>@context.NumberOfRoomRent / @context.NumberOfRoom</MudTd>
                            <MudTd>@context.BuildingName</MudTd>
                            <MudTh><BadgeEntityStatus Status="@context.Status"></BadgeEntityStatus></MudTh>
                            <MudTd>
                                <MudChip Icon="@Icons.Filled.MenuOpen" Color="Color.Primary" OnClick="@( async() => await OpenDetail(context.Id))" Disabled="@_isDisableControls">Chi tiết</MudChip>
                                <MudChip Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@( async() => await OnDelete(context.Id))" Disabled="@_isDisableControls">Xóa</MudChip>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                <CustomPagination Class="my-1" HasNext="@floorPagination.HasNext" OnPageChange="@(async e=> await  OnPaginationButtonClick(e))" CurrentPageNumber="@floorPagination.PageNumber"></CustomPagination>
            }
        </MudPaper>
    </BodyContent>
</CustomListDisplayP2>

@code {
    #region Khai báo
    [Inject]
    public IFloorRespo floorRespo { get; set; }
    [Inject]
    public IBuildingRespo buildingRespo { get; set; }
    [Inject]
    public IDialogService dialogService { get; set; }
    [Inject]
    public ISnackbar snackbar { get; set; }
    [Inject]
    public IRoomDetailRespo roomDetailRespo { get; set; }
    private ViewFloorWithPaginationRequest floorRequest = new();
    private List<BuildingDTO> lstBuilding;
    private PaginationResponse<FloorDTO> floorPagination;
    private PaginationResponse<BuildingDTO> buildingPagination;
    private List<FloorDTO> lstFloor;
    private FloorDeleteRequest floorDeleteRequest = new();
    private string _idBuilding = Guid.Empty.ToString();
    private string _idBuildingCurrent = Guid.Empty.ToString();
    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;
    private bool _isDisableControls = false;
    private PaginationResponse<RoomDetailDTO> roomDetailVM;
    private List<RoomDetailDTO> lstRoomDetail;
    #endregion
    #region Code xử lý
    private async Task LoadData()
    {
        floorRequest.BuildingId = Guid.Parse(_idBuilding);
        floorPagination = await floorRespo.GetAllFloors(floorRequest);
        lstFloor = floorPagination.Data!.ToList();
        _isLoadingList = false;
    }
    protected async override Task OnInitializedAsync()
    {
        buildingPagination = await buildingRespo.GetAllBuilding(new Data.DataTransferObjects.Building.Request.ViewBuildingWithPaginationRequest { PageSize = int.MaxValue - 1 });
        lstBuilding = buildingPagination.Data!.Where(x => x.Status == EntityStatus.Active).ToList();

        if (lstBuilding != null)
        {
            if (lstBuilding.Any())
            {
                _idBuilding = lstBuilding[0].Id.ToString();
                floorRequest.BuildingId = Guid.Parse(_idBuilding);
                await LoadData();
            }
            else
            {
                floorPagination = new();
                _isDisableControls = true;
                _isLoadingList = false;
                _idBuilding = "";
                _idBuildingCurrent = "";
            }
        }
    }
    private async Task OnSearch(string? searchString)
    {
        if (_isDisableControls) return;
        _isLoadingList = true;
        floorRequest.PageNumber = 1;
        floorRequest.SearchString = searchString;
        await LoadData();
    }
    private async Task OpenAdd()
    {
        var dialog = await dialogService.ShowAsync<FloorCreate2>("Thêm tầng mới");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }

    }
    private async Task OpenDetail(Guid idFloor)
    {
        var parameters = new DialogParameters<FloorUpdateP2>();
        parameters.Add(x => x.idFloor, idFloor);
        var dialog = await dialogService.ShowAsync<FloorUpdateP2>("Chi tiết tầng", parameters);
        var result = await dialog.Result;
        if(!result.Canceled)
        {
            await LoadData();
        }
    }
    private async Task OnPaginationButtonClick(int pageNumber)
    {
        if (_isDisableControls) return;
        _isLoadingList = true;
        floorRequest.PageNumber = pageNumber;
        await LoadData();
    }
    private async Task OnDelete(Guid id)
    {

        var confirm = await dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận xóa tầng?",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            roomDetailVM = await roomDetailRespo.GetAllRoomDetails(new Data.DataTransferObjects.RoomDetail.Request.ViewRoomDetailWithPaginationRequest
                {
                    PageSize = int.MaxValue - 1,
                    FloorId = id
                });
            lstRoomDetail = roomDetailVM.Data!.ToList();
            if (lstRoomDetail.Any(x => x.Status == RoomStatus.Occupied || x.Status == RoomStatus.Reserved || x.Status == RoomStatus.AwaitingConfirmation || x.Status == RoomStatus.DoNotDisturb))
            {
                snackbar.Add("Có phòng đang được thuê tại tầng này, không xóa được", Severity.Error);
            }
            else
            {
                floorDeleteRequest.Id = id;
                var removeConfirm = await floorRespo.DeleteFloor(floorDeleteRequest);
                if (removeConfirm)
                {
                    snackbar.Add("Xóa thành công", Severity.Success);
                }
                else
                {
                    snackbar.Add("Xóa thất bại", Severity.Error);
                }
                await LoadData();
            }
            
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_idBuilding != _idBuildingCurrent)
        {
            _isLoadingList = true;
            _idBuildingCurrent = _idBuilding;
            floorRequest.PageNumber = 1;
            await LoadData();
            StateHasChanged();
        }
        
    }
    #endregion
}
