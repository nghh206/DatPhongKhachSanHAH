@using BaseSolution.BlazorServer.Data.DataTransferObjects.Service;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Service.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.ServiceOrder.Request;
@using BaseSolution.BlazorServer.Respository.Interfaces;
<MudDialog>
    <DialogContent>
<MudForm Model="@request" @ref="_form">
    <MudPaper Elevation="0">
        <MudSelect T="string" Label="Dịch vụ" Class="mb-2"
                   AnchorOrigin="Origin.BottomCenter" @bind-Value="@serviceId" For="@(() => serviceId)">
                    @foreach (var item in lstService)
            {
                <MudSelectItem Value="@item.Id.ToString()">@item.Name</MudSelectItem>
            }
        </MudSelect>
    </MudPaper>
</MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="OnClickCancel">Hủy</MudButton>
        <MudButton OnClick="Reset">Khôi phục</MudButton>
        <MudButton OnClick="CreateNewServiceOderForRoomBooking">Lưu</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public Guid idroomBookingDetail { get; set; }
    [Parameter]
    public Guid idCustomer { get; set; }
    private string serviceId;
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public IServiceRespo serviceRespo { get; set; }
    [Inject]
    public IServiceOrderRepo serviceOrderRepo { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    private List<ServiceDTO> lstService = new();
    private ViewServiceWithPaginationRequest serviceViewRequest = new();
    private ServiceOrderCreateForRoomBookingRequest request = new();
    private bool _isLoadingList = true;
    MudForm _form;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {

        lstService = await serviceRespo.GetServices(serviceViewRequest);
    }
    private void Reset()
    {
        request = new();
    }
    private void OnClickCancel()
    {
        MudDialog.Cancel();
    }
    private async Task CreateNewServiceOderForRoomBooking()
    {
        await _form.Validate();
        if (!_form.IsValid) return;
        var confirm = await _dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận thêm dịch vụ ?",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            request.CustomerId = idCustomer;
            request.RoomBookingDetailId = idroomBookingDetail;
            request.ServiceId = Guid.Parse(serviceId);
            request.Price = lstService.FirstOrDefault(x => x.Id == request.ServiceId)!.Price;
            var result = await serviceOrderRepo.CreateServiceForRoomBooking(request);
            if (result == true)
            {
                MudDialog.Close(DialogResult.Ok(true));
                _snackbar.Add("Thêm thành công", Severity.Success);
                await LoadData();

            }
            else
            {
                _snackbar.Add
                (
                    "Thêm thất bại",
                     Severity.Error
                );
            }
            Reset();
        }
    }
}
