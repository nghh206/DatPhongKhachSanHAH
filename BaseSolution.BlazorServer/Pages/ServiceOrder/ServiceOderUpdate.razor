@using BaseSolution.BlazorServer.Data.DataTransferObjects.Customer;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Customer.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomBooking;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomBooking.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Service;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Service.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.ServiceOrder.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.ServiceType;
@using BaseSolution.BlazorServer.Pages.Customer;
@using BaseSolution.BlazorServer.Respository.Interfaces;
<MudDialog>
    <DialogContent>
        <MudForm Model="serviceOrderUpdate" @ref="@_form" @bind-IsValid="@_formIsValid">
            <MudPaper Elevation="0">
                <MudGrid>
                    <MudSelect T="EntityStatus" AnchorOrigin="Origin.BottomCenter" Label="Trạng thái" @bind-Value="serviceOrderUpdate.Status" For="@(() => serviceOrderUpdate.Status)">
                            <MudSelectItem Value="EntityStatus.Active">Hoạt động</MudSelectItem>
                            <MudSelectItem Value="EntityStatus.InActive">Không hoạt động</MudSelectItem>
                            <MudSelectItem Value="EntityStatus.Pending">Chờ</MudSelectItem>
                            <MudSelectItem Value="EntityStatus.PendingForActivation">Chờ hoạt động</MudSelectItem>
                            <MudSelectItem Value="EntityStatus.PendingForConfirmation">Chờ kích hoạt</MudSelectItem>
                            <MudSelectItem Value="EntityStatus.PendingForApproval">Chờ chấp thuận</MudSelectItem>
                            <MudSelectItem Value="EntityStatus.Locked">Khóa</MudSelectItem>
                        </MudSelect>

                </MudGrid>
            </MudPaper>
        </MudForm>

    </DialogContent>
    <DialogActions>
        @if (serviceOrder == null)
        {
            <MudButton OnClick="OnClickCancel">Hủy</MudButton>
        }
        else
        {
            <MudButton OnClick="OnClickCancel">Hủy</MudButton>
            <MudButton OnClick="Reset">Khôi phục</MudButton>
            <MudButton OnClick="UpdateService">Lưu</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    #region Khai báo
    [Parameter]
    public Guid idServiceOrder { get; set; }
    [Parameter]
    public Guid idCustomer { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    public IServiceOrderRepo serviceOrderRepo { get; set; }
    [Inject]
    public ICustomerRepo cumtomerRespo { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    MudForm _form;
    private bool _formIsValid;

    private ServiceOrderDTO? serviceOrder;

    private PaginationResponse<CustomerDTO> CustomerVM;
    List<CustomerDTO> lstCustomer = new();

    ServiceOrderUpdateRequest serviceOrderUpdate = new();

    private ViewCustomerWithPaginationRequest customer = new();
    #endregion

    #region Code xử lý
    protected async override Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        serviceOrder = await serviceOrderRepo.GetServiceOrderById(idServiceOrder);

        CustomerVM = await cumtomerRespo.GetCustomer(customer);
        lstCustomer = CustomerVM.Data!.ToList();
        serviceOrderUpdate.Id = serviceOrder.Id;
        serviceOrderUpdate.Status = serviceOrder.Status;
        serviceOrderUpdate.CreatedTime = serviceOrder.CreatedTime;
        serviceOrderUpdate.CustomerId = serviceOrder.CustomerId;
    }
    private void OnClickCancel()
    {
        MudDialog.Cancel();
    }
    private async Task Reset()
    {
        await LoadData();
    }
    private bool CheckChangeData()
    {
        return serviceOrder.Status != serviceOrderUpdate.Status;
    }
    private async Task UpdateService()
    {
        await _form.Validate();
        if (!_form.IsValid) return;
        var confirm = await _dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận sửa thông tin dịch vụ",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            var result = await serviceOrderRepo.UpdateServiceOrder(serviceOrderUpdate);
            if (result)
            {
                if (CheckChangeData())
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    _snackbar.Add("Sửa thành công", Severity.Success);
                }
                else
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    _snackbar.Add("Không có thay đổi dữ liệu để cập nhật", Severity.Warning);
                }
            }
            else
            {
                _snackbar.Add("Sửa thất bại", Severity.Error);
            }
            await Reset();
        }
    }
    
    #endregion
}
