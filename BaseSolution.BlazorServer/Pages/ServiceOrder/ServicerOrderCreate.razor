@using BaseSolution.BlazorServer.Data.DataTransferObjects.Bill.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Customer;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Customer.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomBooking.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomBooking;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Service;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Service.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.ServiceOrder.Request;
@using BaseSolution.BlazorServer.Pages.Customer;
@using BaseSolution.BlazorServer.Respository.Interfaces;
<MudDialog>
    <DialogContent>
        @if (_isLoadingList)
        {
            <LoadingIndicator></LoadingIndicator>
        }
        else
        {
            <MudForm Model="@serviceOderRequest" @ref="_form">
                <MudPaper Elevation="0">
                    <MudSelect T="string" Label="Khách hàng" Class="mb-2"
                               AnchorOrigin="Origin.BottomCenter" @bind-Value="@customerId" For="@(() => customerId)">
                        @foreach (var item in lstCustomer)
                        {
                            <MudSelectItem Value="@item.Id.ToString()">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudChip Icon="@Icons.Material.Filled.Add" @onclick="async() => await OpenAdd()" Color="Color.Primary">Thêm khách hàng mới</MudChip>
                    <MudSelect T="string" Label="Dịch vụ" Class="mb-2"
                               AnchorOrigin="Origin.BottomCenter" @bind-Value="@serviceId" For="@(() => serviceId)">
                        @foreach (var item in _lstServiceNotNeedRoomBooking)
                        {
                            <MudSelectItem Value="@item.Id.ToString()">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudItem>
                        <MudTextField T="DateTime?" Format="s" @bind-Value="ngayđat" Label="Ngày đặt" InputType="InputType.DateTimeLocal" />
                    </MudItem>

                </MudPaper>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="OnClickCancel">Hủy</MudButton>
        <MudButton OnClick="Reset">Khôi phục</MudButton>
        <MudButton OnClick="CreateNewServiceOder">Lưu</MudButton>
    </DialogActions>
</MudDialog>
@code {
    #region Khai báo
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    [Inject]
    public IServiceRespo serviceRespo { get; set; }
    [Inject]
    public ICustomerRepo cumtomerRespo { get; set; }
    [Inject]
    public IServiceOrderRepo ServiceOderRepo { get; set; }
    [Inject]
    public IRoomBookingRespo roomBookingRespo { get; set; }
    private ViewRoombookingPaginationRequest roomBookingRequest = new();
    private List<RoomBookingDto> lstRoomBooking;
    private PaginationResponse<RoomBookingDto> roomBookingVM;

    DateTime? ngayđat = DateTime.Now;

    DateTime now = DateTime.Now;
    private ServiceOrderCreateRequest serviceOderRequest = new();
    private ViewServiceWithPaginationRequest serviceViewRequest = new();
    private PaginationResponse<CustomerDTO> CustomerVM;
    List<CustomerDTO> lstCustomer = new();
    List<CustomerDTO> lstCustomerNotRoomBooking = new();
    private List<ServiceDTO> lstService;
    private string customerId;
    private string serviceId;
    List<ServiceDTO> _lstServiceNotNeedRoomBooking;

    private ViewCustomerWithPaginationRequest customer = new();

    private bool _isLoadingList = true;
    MudForm _form;




    #endregion
    #region Code xử lý
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        roomBookingVM = await roomBookingRespo.GetAllRoomBooking(roomBookingRequest);
        lstRoomBooking = roomBookingVM.Data!.ToList();
        CustomerVM = await cumtomerRespo.GetCustomer(customer);
        lstCustomer = CustomerVM.Data!.ToList();
        lstService = await serviceRespo.GetServices(serviceViewRequest);
        _isLoadingList = false;

       _lstServiceNotNeedRoomBooking = lstService.Where(x => !x.IsRoomBookingNeed).ToList();
    }

    private void OnClickCancel()
    {
        MudDialog.Cancel();
    }
    private void Reset()
    {
        customer = new();
    }
    private async Task CreateNewServiceOder()
    {
        await _form.Validate();
        if (!_form.IsValid) return;
        var confirm = await _dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận thêm dịch vụ ?",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            if (ngayđat < now)
            {
                _snackbar.Add("Ngày không hợp lệ", Severity.Error);
                return;
            }
                serviceOderRequest.CustomerId = Guid.Parse(customerId);
                serviceOderRequest.ServiceId = Guid.Parse(serviceId);
                serviceOderRequest.CreatedTime = (DateTimeOffset)ngayđat;
                serviceOderRequest.Price = lstService.FirstOrDefault(x => x.Id == serviceOderRequest.ServiceId)!.Price;
            var result = await ServiceOderRepo.CreateNewService(serviceOderRequest);
            if (result == true)
            {
                MudDialog.Close(DialogResult.Ok(true));
                _snackbar.Add("Thêm thành công", Severity.Success);
            }
            else
            {
                _snackbar.Add
                (
                    "Thêm thất bại",
                     Severity.Error
                );
            }
            Reset();
        }
    }
    private async Task OpenAdd()
    {
        var dialog = await _dialogService.ShowAsync<AdminCreateCustomer>("Thêm khách hàng đặt ");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }

    #endregion
}
