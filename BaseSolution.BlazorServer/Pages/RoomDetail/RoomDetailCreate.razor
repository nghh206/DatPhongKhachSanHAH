@using BaseSolution.BlazorServer.Data.DataTransferObjects.Building
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Building.Request
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Floor
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Floor.Request
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail.Request
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomType
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomType.Request
@using BaseSolution.BlazorServer.Respository.Interfaces
<MudDialog>
    <DialogContent>
        @if(isLoadingList)
        {
            <LoadingIndicator />
        }
        else
        {
            <MudPaper Elevation="0" Class="ma-1">
                <MudForm Model="createRoomDetailRequest" @ref="_form">
                    <MudGrid>
                        <MudItem xs="4">
                            <MudImage Src="@imageURL" Height="130" Width="160" ObjectFit="ObjectFit.Fill" Class="rounded-lg w-100" Style="border: 1px grey solid;"></MudImage>
                            <MudFileUpload T="IBrowserFile" Class="align-content-center" FilesChanged="UploadImage">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.CloudUpload"
                                               for="@context">
                                        Thay đổi ảnh
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                        </MudItem>
                        <MudItem xs="8">
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudSelect T="Guid" @bind-Value="idBuilding" Label="Tòa nhà" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="HandleBuildingValueChanged">
                                        @if (idBuilding == Guid.Empty)
                                        {
                                            <MudSelectItem Value="Guid.Empty">Không có tòa nào</MudSelectItem>
                                        }
                                        else
                                        {
                                            @foreach (var item in lstBuilding)
                                            {
                                                <MudSelectItem Value="item.Id">@item.Name</MudSelectItem>
                                            }
                                        }

                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudSelect T="Guid" @bind-Value="idFloor" Label="Tầng" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                        @if (idFloor == Guid.Empty)
                                        {
                                            <MudSelectItem Value="Guid.Empty">Không có tầng nào</MudSelectItem>
                                        }
                                        else
                                        {
                                            @foreach (var item in lstFloor)
                                            {
                                                <MudSelectItem Value="item.Id">@item.Name</MudSelectItem>
                                            }
                                        }

                                    </MudSelect>
                                </MudItem>
                            </MudGrid>
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudSelect T="Guid" @bind-Value="idRoomType" Label="Loại phòng" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                        @if (idRoomType == Guid.Empty)
                                        {
                                            <MudSelectItem Value="Guid.Empty">Không có loại phòng nào</MudSelectItem>
                                        }
                                        else
                                        {
                                            @foreach (var item in lstRoomType)
                                            {
                                                <MudSelectItem Value="item.Id">@item.Name</MudSelectItem>
                                            }
                                        }

                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField @bind-Value="createRoomDetailRequest.Name" For="@(() => createRoomDetailRequest.Name)" Label="Tên phòng"></MudTextField>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                    
                    <MudGrid>
                        <MudItem xs="4">
                            <MudNumericField @bind-Value="createRoomDetailRequest.RoomSize" For="@(() => createRoomDetailRequest.RoomSize)" Label="Diện tích phòng (mét vuông)" Min="1" T="double"></MudNumericField>
                        </MudItem>
                        <MudItem xs="4">
                            <MudNumericField @bind-Value="createRoomDetailRequest.MaxPeopleStay" For="@(() => createRoomDetailRequest.MaxPeopleStay)" Label="Số người tối đa" T="int" Min="1"></MudNumericField>
                        </MudItem>
                        <MudItem xs="4">
                            <MudNumericField @bind-Value="createRoomDetailRequest.Price" For="@(() => createRoomDetailRequest.Price)" Step="1000" Label="Giá phòng (VNĐ)" T="decimal" Min="100000"></MudNumericField>
                        </MudItem>
                    </MudGrid>

                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField Variant="Variant.Outlined" @bind-Value="createRoomDetailRequest.Description" T="string" For="@(() => createRoomDetailRequest.Description)" Label="Mô tả phòng" Lines="3"></MudTextField>
                        </MudItem>
                    </MudGrid>
                </MudForm>
               
            </MudPaper>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="OnClickCancel">Hủy</MudButton>
        <MudButton OnClick="Reset">Khôi phục</MudButton>
        <MudButton OnClick="CreateNewRoomDetail">Lưu</MudButton>
    </DialogActions>
</MudDialog>

@code {
    #region Khai báo
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    public IBuildingRespo buildingRespo { get; set; }
    [Inject]
    public IFloorRespo floorRespo { get; set; }
    [Inject]
    public IRoomTypeRespo roomTypeRespo { get; set; }
    [Inject]
    public IRoomDetailRespo roomDetailRespo { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    MudForm _form;
    private ViewBuildingWithPaginationRequest buildingRequest = new()
    {
        PageSize = int.MaxValue -1
    };
    private ViewFloorWithPaginationRequest floorRequest = new()
    {
        PageSize = int.MaxValue -1
    };
    private ViewRoomTypeWithPaginationRequest roomTypeRequest = new()
    {
        PageSize = int.MaxValue - 1
    };
    private PaginationResponse<BuildingDTO> buildingVM;
    private PaginationResponse<FloorDTO> floorVM;
    private PaginationResponse<RoomTypeDTO> roomTypeVM;
    private List<BuildingDTO> lstBuilding;
    private List<FloorDTO> lstFloor;
    private List<RoomTypeDTO> lstRoomType;
    private RoomDetailCreateRequest createRoomDetailRequest = new();
    private Guid idBuilding = Guid.Empty;
    private Guid idBuildingCurrent = Guid.Empty;
    private bool isLoadingList = true;
    private Guid idRoomType = Guid.Empty;
    private Guid idFloor;
    private string imageURL = @"\image\RoomDetail\Guestrooms.jpg";
    ImageHandle imageHandle = new();
    #endregion
    #region Code xử lý
    private async Task LoadData()
    {
        floorRequest.BuildingId = idBuilding;
        floorVM = await floorRespo.GetAllFloors(floorRequest);
        lstFloor = floorVM.Data!.Where(x => x.Status == EntityStatus.Active).ToList();
        if(lstFloor != null)
        {
            if (lstFloor.Any())
            {
                idFloor = lstFloor[0].Id;
            }
            else
            {
                idFloor = Guid.Empty;
            }
        }
        isLoadingList = false;
    }
    protected override async Task OnInitializedAsync()
    {
        buildingVM = await buildingRespo.GetAllBuilding(buildingRequest);
        lstBuilding = buildingVM.Data!.Where(x => x.Status == EntityStatus.Active).ToList();
        roomTypeVM = await roomTypeRespo.GetAllRoomTypes(roomTypeRequest);
        lstRoomType = roomTypeVM.Data!.Where(x => x.Status == EntityStatus.Active).ToList();
        if(lstRoomType != null)
        {
            if (lstRoomType.Any())
            {
                idRoomType = lstRoomType[0].Id;
            }
            else
            {
                idRoomType = Guid.Empty;
            }
        }
        if(lstBuilding != null)
        {
            if(lstBuilding.Any())
            {
                idBuilding = lstBuilding[0].Id;
                floorRequest.BuildingId = idBuilding;
                idBuildingCurrent = idBuilding;
                await LoadData();
            }
            else
            {
                idBuilding = Guid.Empty;
                idBuildingCurrent = Guid.Empty;
            }
        }
    }
    private async Task HandleBuildingValueChanged(IEnumerable<Guid> values)
    {
        isLoadingList = true;
        idBuildingCurrent = values.First();
        await LoadData();
        isLoadingList = false;
    }
    private void OnClickCancel()
    {
        MudDialog.Cancel();
    }
    private void Reset()
    {
        createRoomDetailRequest = new();
    }
    private async Task CreateNewRoomDetail()
    {
        await _form.Validate();
        if (!_form.IsValid) return;
        var confirm = await _dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận thêm phòng?",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            createRoomDetailRequest.FloorId = idFloor;
            createRoomDetailRequest.RoomTypeId = idRoomType;
            createRoomDetailRequest.Images.Add(imageURL);
            FloorDTO floorInfo = await floorRespo.GetFloorById(idFloor);
            if(floorInfo.NumberOfRoomRent == floorInfo.NumberOfRoom)
            {
                _snackbar.Add
                (
                    "Tầng đã đạt tối đa phòng cho thuê",
                     Severity.Error
                );
            }
            else
            {
                var result = await roomDetailRespo.CreateNewRoomDetail(createRoomDetailRequest);
                if (result == true)
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    _snackbar.Add("Thêm thành công", Severity.Success);
                }
                else
                {
                    _snackbar.Add
                    (
                        "Thêm thất bại",
                         Severity.Error
                    );
                }
            }
            
            Reset();
        }
    }
    private async Task UploadImage(IBrowserFile file)
    {
        imageURL = @"\image\RoomDetail\" + await imageHandle.AddImage(file, "RoomDetail");
    }
    #endregion
}
