 @using BaseSolution.BlazorServer.Data.DataTransferObjects.User
@using BaseSolution.BlazorServer.Data.DataTransferObjects.User.Request
@using BaseSolution.BlazorServer.Respository.Interfaces

 @page "/user/list-to-manager"
<CustomListDisplayP2 Label="@("Danh sách nguời dùng")" IsLoading="_isLoadingAll" DisableSearch="_isDisableControls" OnSearch="OnSearch">
    <HeaderContent>

    </HeaderContent>
    <BodyContent>
        <MudPaper Elevation="0" Class="custom-list-display-border">
            @if (_isLoadingList)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true"></MudProgressLinear>
            }
            else
            {
                <MudCard Class="p-3" Elevation="0">
                    <MudTable Items="@_userVM.Data" Elevation="0">
                        <HeaderContent>
                            <MudTh>Tên</MudTh>
                            <MudTh>Email</MudTh>
                            <MudTh>Tài khoản</MudTh>
                            <MudTh>Mật khẩu</MudTh>
                            <MudTh>Số điện thoại</MudTh>
                            <MudTh>Hành động</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Name</MudTd>
                                <MudTd>@context.Email</MudTd>
                                <MudTd>@context.UserName</MudTd>
                                <MudTd>@context.Password</MudTd>
                                <MudTh>@context.PhoneNumber</MudTh>
                                <MudTd>
                                    <MudChip Icon="@Icons.Material.Filled.MenuOpen" Color="Color.Primary" OnClick="@( async() => await OpenDetail(context.Id))" Disabled="@_isDisableControls">Chi tiết</MudChip>
                                    <MudChip Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@( async() => await OnDelete(context.Id))" Disabled="@_isDisableControls">Xóa</MudChip>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                        <MudDivider />
                        <CustomPagination Class="my-1" HasNext="@_userVM.HasNext" OnPageChange="@(async e=> await  OnPaginationButtonClick(e))" CurrentPageNumber="_userVM.PageNumber"></CustomPagination>
                    </MudCard>
            }
        </MudPaper>
    </BodyContent>
</CustomListDisplayP2>
@code {


    [Inject]
    public IUserRepo userRepo { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    private PaginationResponse<UserHotelDTO> _userVM;
    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;
    private bool _isDisableControls = false;
    private bool closeDetail = true;
    private ViewUsersHotelWithPaginationRequest _userRequest = new();
    private UserHotelDeleteRequest _userDeleteRequest = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        _userVM = await userRepo.GetAllUser(_userRequest);
        _isLoadingList = false;
        _isLoadingAll = false;
    }
    private async Task OnPaginationButtonClick(int pageNumber)
    {
        if (_isDisableControls) return;
        _isLoadingList = true;
        _userRequest.PageNumber = pageNumber;
        await LoadData();
    }
    private async Task OnSearch(string? searchString)
    {
        if (_isDisableControls) return;
        _isLoadingList = true;
        _userRequest.PageNumber = 1;
        // _userRequest.Name = searchString;
        await LoadData();
    }
    private async Task OpenDetail(Guid idUser)
    {
        var parameters = new DialogParameters<UserUpdate>();
        parameters.Add(x => x.idUser, idUser);
        var dialog = await _dialogService.ShowAsync<UserUpdate>("Thông tin cá nhân chi tiết", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }
    public async Task OnDelete(Guid deleteId)
    {
        var confirm = await _dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận xóa người dùng?",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            _userDeleteRequest.Id = deleteId;
            var removeConfirm = await userRepo.DeleteUser(_userDeleteRequest);
            if (removeConfirm)
            {
                _snackbar.Add("Xóa thành công", Severity.Success);
            }
            else
            {
                _snackbar.Add("Xóa thất bại", Severity.Error);
            }
            await LoadData();
        }
    }
}
