@page "/customer/RoomType"
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail.Request
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomType
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomType.Request
@using BaseSolution.BlazorServer.Respository.Interfaces
<CustomListDisplayP2 Label="@("Đặt phòng")" IsLoading="_lstRoomType == null && _isLoadingAll" DisableSearch="_isDisableControls" OnSearch="@OnSearch">
    <HeaderContent>
      
    </HeaderContent>
    <BodyContent>
        <MudPaper Elevation="0" Class="custom-list-display-border">
            @if (_isLoadingList)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="m-3" />
            }
            else
            {
                <MudTable Items="@_RoomTypeVM.Data" Style="position:relative;" Elevation="0">
                    <HeaderContent>
                        <MudTh>STT</MudTh>
                        <MudTh>Tên loại phòng</MudTh>
                        <MudTh>Số lượng tiện ích </MudTh>
                        <MudTh>Số lượng phòng</MudTh>
                        <MudTh>Hành động</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@(_lstRoomType.IndexOf(context) + 1)</MudTd>
                        <MudTd>@context.Name</MudTd>
                            <MudTd>@context.NumberOfAmenities <MudChip Icon="@Icons.Material.Filled.ListAlt" OnClick="@(() => OpenAmenity(context.Id))"></MudChip></MudTd>
                        <MudTd>@context.AmountOfRoomType</MudTd>
                            <MudTd>
                                <MudChip Color="Color.Primary" OnClick="@(() => OpenDetail(context.Id))" Disabled="@_isDisableControls">Đặt phòng</MudChip>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                <CustomPagination Class="my-1" HasNext="@_RoomTypeVM.HasNext" OnPageChange="@(async e => await OnPaginationButtonClick(e))" CurrentPageNumber="@_RoomTypeVM.PageNumber"></CustomPagination>
                <MudDivider />
            }
        </MudPaper>
    </BodyContent>
</CustomListDisplayP2>
@code {
    [Inject]
    public IRoomTypeRespo _roomTypeRepo { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    private Guid _idRoomType = Guid.Empty;
    private Guid _idRoomDetail = Guid.Empty;
    #region
    private PaginationResponse<RoomTypeDTO> _RoomTypeVM;
    private List<RoomTypeDTO> _lstRoomType;
    private ViewRoomTypeWithPaginationRequest _roomTypeRequest = new();
    private PaginationResponse<RoomDetailDTO> _roomDetailslVM;
    private List<RoomDetailDTO> _lstRoomDetail;

    #endregion
    #region
    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;
    private bool closeAdd = true;
    private bool closeDetail = true;
    private bool _isDisableControls = false;
    #endregion
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    #region RoomType
    private async Task LoadData()
    {
        _RoomTypeVM = await _roomTypeRepo.GetAllRoomTypes(_roomTypeRequest);
        _lstRoomType = _RoomTypeVM.Data!.Where(x => x.Status == EntityStatus.Active).ToList();
        _isLoadingList = false;
        _isLoadingAll = false;
    }
    private async Task OpenDetail(Guid _idRoomType)
    {
        var parameters = new DialogParameters<CustomerRoomDetail>();
        parameters.Add(x => x.idRoomType, _idRoomType);
        var dialog = await _dialogService.ShowAsync<CustomerRoomDetail>("Danh sách phòng có thể đặt", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }
    private async Task OpenAmenity(Guid _idRoomType)
    {
        var parameters = new DialogParameters<CustomerArmenityRoomDetails>();
        parameters.Add(x => x.idRoomType, _idRoomType);
        var dialog = await _dialogService.ShowAsync<CustomerArmenityRoomDetails>("Danh sách tiện ích", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task OnPaginationButtonClick(int pageNumber)
    {
        if (_isDisableControls) return;
        _isLoadingList = true;
        _roomTypeRequest.PageNumber = pageNumber;
        await LoadData();
    }
    private async Task OnSearch(string? searchString)
    {
        _isLoadingList = true;
        _roomTypeRequest.PageNumber = 1;
        _roomTypeRequest.SearchString = searchString;
        await LoadData();

    }
    #endregion
}
