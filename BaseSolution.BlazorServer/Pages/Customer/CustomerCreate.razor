@page "/login-customer"
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Customer
@using System.ComponentModel.DataAnnotations
@using System.Threading.Tasks
@using System.Text.RegularExpressions
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Customer.Request;
@using BaseSolution.BlazorServer.Extensions;
@using BaseSolution.BlazorServer.Respository.Implements
@using BaseSolution.BlazorServer.Respository.Interfaces;
@using Microsoft.AspNetCore.Mvc;
@inject IdCustomer idCustomer
@inject NavigationManager navigationManager

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm Model="createRequest" @ref="form" @bind-IsValid="@success">
                <MudTextField T="string" Label="Tên" @bind-Value="createRequest.Name" For="@(() => createRequest.Name)" Disabled="isFormLocked" Required="true" />
                <MudTextField T="string" Label="Mã định danh" @bind-Value="createRequest.IdentificationNumber" For="@(() => createRequest.IdentificationNumber)" Required="true" Disabled="isFormLocked" />
                <MudTextField T="string" Label="Email" Disabled="isFormLocked" @bind-Value="createRequest.Email" For="@(() => createRequest.Email)" Required="true" />
                <MudTextField T="string" Label="Số điện thoại" @bind-Value="createRequest.PhoneNumber" For="@(() => createRequest.PhoneNumber)" Disabled="isFormLocked" Required="true" />
                <MudSpacer></MudSpacer>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="@SendEmail">Gửi mã</MudButton>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <div class="d-flex align-center justify-space-between">
                <MudTextField T="string" Label="Nhập code" Required="true" @bind-Value="createRequest.ApprovedCode"></MudTextField>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@Login">Đăng nhập</MudButton>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool success = false;
    bool isCodeSent = false;
    bool isFormLocked = false;
    MudForm form;
    [Parameter]
    public string identification { get; set; }
    [Inject]
    public ICustomerRepo customerRepo { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    [Inject]
    public ISendMailService sendMailService { get; set; }
    public CustomerCreateRequest createRequest = new CustomerCreateRequest();


    private async Task SendEmail()
    {
        if (!isCodeSent)
        {
            var checkIdenAndEmail = await customerRepo.GetIdentificationNumber(createRequest.IdentificationNumber);
            var checkEmailExist = await customerRepo.GetEmailAsync(createRequest.Email);
            if (checkIdenAndEmail.IdentificationNumber == "" && checkEmailExist.Email == "")
            {
                var idCustomer = await customerRepo.SignUpOrSignIn(createRequest);
                _snackbar.Add("Đã gửi mã đến email của bạn! Vui lòng kiểm tra để kích hoạt tài khoản!", Severity.Info);
                isCodeSent = true;
                isFormLocked = true;
            }
            else if (checkIdenAndEmail.Email == createRequest.Email)
            {
                var idCustomer = await customerRepo.SignUpOrSignIn(createRequest);
                _snackbar.Add("Đã gửi mã đến email của bạn! Vui lòng kiểm tra để đăng nhập!", Severity.Info);
                isCodeSent = true;
                isFormLocked = true;
            }
            else
            {
                _snackbar.Add("Mã định danh và Email là duy nhất của mỗi người. Vui lòng nhập lại!", Severity.Info);
            } 
            
        }
    }

    private async Task Login()
    {
        if (isCodeSent && isFormLocked)
        {
            var checkCode = await customerRepo.VerifyCode(createRequest.ApprovedCode, createRequest.IdentificationNumber);
            if (!checkCode)
            {
                await _dialogService.ShowMessageBox("Lỗi", "Vui lòng nhập đúng mã code!");
                return;
            }
            else
            {

                var confirm = await _dialogService.ShowMessageBox(
               "Thông báo",
               "Xác nhận đăng nhập?",
               "Xác nhận",
               cancelText: "Hủy"
           );

                if (confirm == true)
                {
                    isFormLocked = true;

                    var result = await customerRepo.GetIdentificationNumber(createRequest.IdentificationNumber);


                    if (result != null)
                    {
                        _snackbar.Add("Đăng nhập thành công", Severity.Success);

                        IdCustomer.Instance.Id = result.Id;
                        navigationManager.NavigateTo($"/customer/RoomType");
                        
                        var activeCustomer = await customerRepo.UpdateStatusCustomer(result.Id);
                    }
                    else
                    {
                        _snackbar.Add("Thêm thất bại", Severity.Error);
                    }
                }
            }
            Reset();
            
        }
    }
    private void Reset()
    {

        createRequest = new CustomerCreateRequest();
        isFormLocked = false;
    }
}
