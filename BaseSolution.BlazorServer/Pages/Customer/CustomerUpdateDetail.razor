@using BaseSolution.BlazorServer.Data.DataTransferObjects.Customer
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Customer.Request
@using BaseSolution.BlazorServer.Respository.Interfaces
<MudDialog>
    <DialogContent>
        @if (customerInfo == null)
        {
            <MudText>Không có thông tin nào</MudText>
        }
        else
        {
            <MudForm Model="customerUpdateRequest" @ref="@_form" @bind-IsValid="@_formIsValid">
                <MudPaper Width="100%" Elevation="0">

                    <MudTextField @bind-Value="customerUpdateRequest.Name" For="@(() => customerUpdateRequest.Name)" Label="Tên"></MudTextField>

                    <MudTextField @bind-Value="customerUpdateRequest.PhoneNumber" For="@(() => customerUpdateRequest.PhoneNumber)" Label="Số điện thoại"></MudTextField>

                    <MudTextField @bind-Value="customerUpdateRequest.Email" For="@(() => customerUpdateRequest.Email)" Label="Email"></MudTextField>

                   
                    <MudSelect T="CustomerType" AnchorOrigin="Origin.BottomCenter" @bind-Value="customerUpdateRequest.CustomerType" For="@(() => customerUpdateRequest.CustomerType)" Label="Loại khách hàng">
                        <MudSelectItem Value="CustomerType.Customer">Khách</MudSelectItem>
                        <MudSelectItem Value="CustomerType.Guest">Khách vãng lai</MudSelectItem>
                    </MudSelect>
                    <MudSelect T="EntityStatus" AnchorOrigin="Origin.BottomCenter" @bind-Value="customerUpdateRequest.Status" For="@(() => customerUpdateRequest.Status)" Label="Trạng thái">
                                <MudSelectItem Value="EntityStatus.Active">Hoạt động</MudSelectItem>
                                <MudSelectItem Value="EntityStatus.InActive">Không hoạt động</MudSelectItem>
                                <MudSelectItem Value="EntityStatus.Pending">Chờ</MudSelectItem>
                                <MudSelectItem Value="EntityStatus.PendingForActivation">Chờ hoạt động</MudSelectItem>
                                <MudSelectItem Value="EntityStatus.PendingForConfirmation">Chờ kích hoạt</MudSelectItem>
                                <MudSelectItem Value="EntityStatus.PendingForApproval">Chờ chấp thuận</MudSelectItem>
                                <MudSelectItem Value="EntityStatus.Locked">Khóa</MudSelectItem>
                    </MudSelect>
                    
                </MudPaper>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        @if (customerInfo == null)
        {
            <MudButton OnClick="OnClickCancel">Hủy</MudButton>
        }
        else
        {
            <MudButton OnClick="OnClickCancel">Hủy</MudButton>
            <MudButton OnClick="@(async() => await Reset())">Khôi phục</MudButton>
            <MudButton OnClick="@(async() => await Update())">Lưu</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public Guid idCustomer { get; set; }
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    MudForm _form;
    [Inject]
    private ICustomerRepo customerRepo { get; set; }
    [Inject]
    public IDialogService dialogService { get; set; }
    [Inject]
    public ISnackbar snackbar { get; set; }
    private bool _formIsValid;
    private CustomerUpdateRequest customerUpdateRequest = new();
    private CustomerDTO? customerInfo;

    protected async override Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        customerInfo = await customerRepo.GetCustomerById(idCustomer);
        customerUpdateRequest.Id = customerInfo.Id;
        customerUpdateRequest.Name = customerInfo.Name;
        customerUpdateRequest.PhoneNumber = customerInfo.PhoneNumber;
        customerUpdateRequest.Email = customerInfo.Email;
        customerUpdateRequest.CustomerType = customerInfo.CustomerType;
        customerUpdateRequest.Status = customerInfo.Status;
    }

    private bool CheckChangeData()
    {
        return customerInfo!.Name != customerUpdateRequest.Name 
        || customerInfo.PhoneNumber != customerUpdateRequest.PhoneNumber 
        || customerInfo.Email != customerUpdateRequest.Email
        || customerInfo.CustomerType != customerUpdateRequest.CustomerType
        || customerInfo.Status != customerUpdateRequest.Status;
    }
    private async Task Update()
    {
        await _form.Validate();
        if (!_form.IsValid) return;
        var confirm = await dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận sửa thông tin người dùng",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            var result = await customerRepo.UpdateCustomer(customerUpdateRequest);
            if (result)
            {
                if (CheckChangeData())
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    snackbar.Add("Sửa thành công", Severity.Success);
                }
                else
                {
                    OnClickCancel();
                    snackbar.Add("Không có thay đổi dữ liệu để cập nhật", Severity.Warning);
                }
            }
            else
            {
                snackbar.Add("Sửa thất bại", Severity.Error);
            }
            await Reset();
        }
    }

    private void OnClickCancel()
    {
        MudDialog.Cancel();
    }
    private async Task Reset()
    {
        await LoadData();
    }
}
